plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    /*使用Composing builds来管理依赖库，
    但是目前尝试之后无法自动补全，暂时使用buildSrc的方式*/
//    id 'com.example.configplugin'
}

/*获取当前git 提交次数来作为versionCode
获取最后一次git 提交的commitId 和 提交日期来拼接称为 versionName*/
def gitCommitCount = Integer.parseInt('git rev-list HEAD --count'.execute().text.trim())
def gitSHA = ('git rev-parse --short HEAD'.execute().text.trim())
String time = getTime()
//def gitCurrentTag = 'git describe --tags --abbrev=0'.execute([], project.rootDir).text.trim()
def gitCurrentTag = '1.0.' + gitCommitCount + "." + gitSHA + "." + time
println("gitCurrentTag = " + gitCurrentTag)
println("gitCommitCount = " + gitCommitCount)

/*获取当前的打包时间，写进apk打包后命名信息内，方便辨别apk打包时间*/
import java.text.SimpleDateFormat

//需要手动设置时区，否则在不同的Android Studio 环境中可能导致运行出错
SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd_HHmm_")
simpleDateFormat.setTimeZone(TimeZone.getTimeZone("GMT+08:00"))
Date date = new Date()
String datetime = simpleDateFormat.format(date)
def currentTime = "_" + datetime

android {


    compileSdk AndroidConfig.compileSdkVersion
    buildToolsVersion AndroidConfig.buildToolsVersion

    defaultConfig {
        applicationId AndroidConfig.INSTANCE.defaultConfig.applicationId
        minSdk AndroidConfig.INSTANCE.defaultConfig.minSdkVersion
        targetSdk AndroidConfig.INSTANCE.defaultConfig.targetSdkVersion
        versionCode gitCommitCount
        versionName gitCurrentTag

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility AndroidConfig.INSTANCE.compileOptions.sourceCompatibility
        targetCompatibility AndroidConfig.INSTANCE.compileOptions.targetCompatibility
    }

    //添加签名信息
    signingConfigs {
        release {
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword STORE_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    //添加apk打包命名与打包后复制到指定目录下
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            //指定apk打包命名
//            outputFileName = 'MyProject_' + "${currentTime}${variant.name}-${variant.versionName}.apk"
            outputFileName = 'MyProject_' + "${currentTime}${variant.name}.apk"
        }
        def appName = "MyProject"
        //指定apk打包后需要复制的目录路径
        def outputFilePath = "${rootDir.absolutePath}/apk/$appName/${variant.buildType.name}"
        File outputFile = new File(outputFilePath)
        variant.assemble.doLast {
            copy {
                variant.outputs.all { file ->
                    copy {
                        from file.outputFile
                        into outputFile
                    }
                }
            }
        }

    }
}

dependencies {

    implementation Libs.kotlinx
    implementation Libs.constraintlayout
    implementation 'androidx.appcompat:appcompat:1.3.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

String getTime() {
    String time = (('git log --pretty=format:%ci HEAD -1'.execute().text.trim()).split(" ")[0])
    String[] timeSplit = time.split("-")
    String realTime = ""
    for (int i = 0; i < timeSplit.length; i++) {
        realTime = realTime + timeSplit[i]
    }
    println("time = " + time + ", realTime = " + realTime)
    return realTime
}
